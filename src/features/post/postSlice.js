import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import axios from '../../api/axios';


const initialState = {
    posts: [],
    isLoading: false,
    fetchError: null,
    error: null
};

export const fetchPosts = createAsyncThunk(
    'posts/fetchPosts',
    async () => {
        const response = await axios.get('getPost')
        // The value we return becomes the `fulfilled` action payload
        return response.data;
    }
);

export const createPost = createAsyncThunk(
    'posts/createPost',
    async (post, { rejectWithValue }) => {
        try {
            const response = await axios.post('postMessage', post)
            // The value we return becomes the `fulfilled` action payload
            return response.data;
        } catch (err) {
            if (!err.response) {
                throw err
            }
            return rejectWithValue(err.response.data)
        }

    }
);

export const postSlice = createSlice({
    name: 'post',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {},
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(fetchPosts.pending, (state) => {
                state.isLoading = true;
            })
            .addCase(fetchPosts.fulfilled, (state, action) => {
                state.isLoading = false;
                state.posts = action.payload.posts;
            })
            .addCase(fetchPosts.rejected, (state, action) => {
                state.isLoading = false;
                state.fetchError = action.error;
            })
            .addCase(createPost.pending, (state) => {
                state.isLoading = true;
            })
            .addCase(createPost.fulfilled, (state, action) => {
                state.isLoading = false;
                state.posts.push(action.payload.post);
            })
            .addCase(createPost.rejected, (state, action) => {
                    console.log(action.error)
                    state.isLoading = false;
                    state.error = action.error;
            })
    }
});

export default postSlice.reducer;